	void applyReadCorrection(const vector<u_int32_t>& nodePath, vector<u_int32_t>& readpath){

		
		//_graph->loadState2(0, -1, _unitigDatas);
		/*
		unordered_set<u_int32_t> writtenUnitigs;

		vector<float> readpathAbudance_values;
		for(u_int32_t nodeName : nodePath){

			u_int32_t nodeIndex = BiGraph::nodeName_to_nodeIndex(nodeName, false);
			u_int32_t unitigIndex = _graph->nodeIndex_to_unitigIndex(nodeIndex);
			const Unitig& u = _graph->_unitigs[unitigIndex];

			if(writtenUnitigs.find(BiGraph::nodeIndex_to_nodeName(u._startNode)) != writtenUnitigs.end()) continue;
			if(writtenUnitigs.find(BiGraph::nodeIndex_to_nodeName(u._endNode)) != writtenUnitigs.end()) continue;

			writtenUnitigs.insert(BiGraph::nodeIndex_to_nodeName(u._startNode));
			writtenUnitigs.insert(BiGraph::nodeIndex_to_nodeName(u._endNode));

			for(u_int32_t nodeIndex : u._nodes){
				readpathAbudance_values.push_back(u._abundance);
			}
		}
		
		float readPathAbundance = Utils::compute_median_float(readpathAbudance_values);
		cout << "Read path abundance: " << readPathAbundance << endl;
		*/
		float minSupportingReads = 4; //readPathAbundance * 0.15;
		//float cutoff = readPathAbundance * 0.2;
		//_graph->loadState2(cutoff, -1, _unitigDatas);
		

		u_int32_t maxDepth = nodePath.size()*2;
		readpath.clear();

		vector<u_int32_t> nodePath_existing;
		for(u_int32_t nodeName : nodePath){
			if(_graph->_isNodeValid2.find(BiGraph::nodeName_to_nodeIndex(nodeName, true)) == _graph->_isNodeValid2.end()) continue;
			nodePath_existing.push_back(nodeName);
		}
		if(nodePath_existing.size() == 0) return;


		long supportSize = 6;
		if(nodePath_existing.size() < supportSize) return;

		u_int64_t anchorPos = -1;
		vector<u_int32_t> nodePath_anchor;
		for(long i=0; i< ((long)nodePath_existing.size())-supportSize; i++){
			
			vector<u_int32_t> nodeNames;
			for(size_t j=i; j<i+supportSize; j++){
				nodeNames.push_back(nodePath_existing[j]);
			}
			//u_int32_t nodeName_source = nodePath_existing[i];
			//u_int32_t nodeName_dest = nodePath_existing[i+supportSize];

			u_int64_t nbSupportingReads = Utils::computeSharedReads(nodeNames, _unitigDatas);
			//cout << i << " " << nbSupportingReads << endl;
			//cout << nodeName_source << " " << nodeName_dest << " " << nbSupportingReads << endl;
			
			if(nbSupportingReads < minSupportingReads) continue;

			for(size_t j=i; j<i+supportSize; j++){
				nodePath_anchor.push_back(nodePath_existing[j]);
			}

			anchorPos = i;
			break;
		}

		
		if(anchorPos == -1) return;

		//vector<u_int32_t> nodePath_supported_left;

		//LEFT
		long ii = anchorPos - 1;
		while(true){

			if(ii < 0) break;

			vector<u_int32_t> nodeNames;
			for(size_t j=ii; j<ii+supportSize; j++){
				nodeNames.push_back(nodePath_existing[j]);
			}
			
			u_int64_t nbSupportingReads = Utils::computeSharedReads(nodeNames, _unitigDatas);

			//cout << "left " << ii << " " << nbSupportingReads << endl;

			if(nbSupportingReads < minSupportingReads){
				nodePath_existing.erase(nodePath_existing.begin()+ii);
			}

			ii -= 1;
		}

		//RIGHT
		ii = anchorPos + 1;
		while(true){

			if(ii > ((long)nodePath_existing.size())-supportSize) break;

			vector<u_int32_t> nodeNames;
			for(size_t j=ii; j<ii+supportSize; j++){
				nodeNames.push_back(nodePath_existing[j]);
			}
			
			u_int64_t nbSupportingReads = Utils::computeSharedReads(nodeNames, _unitigDatas);

			//cout << "right " << ii << " " << nbSupportingReads << endl;

			if(nbSupportingReads < minSupportingReads){
				nodePath_existing.erase(nodePath_existing.begin()+ii+supportSize-1);
				continue; //! the ii incrmeent is handled by erase
			}

			ii += 1;
		}
		
		/*
		cout << "\tRead supported:" << endl;
		cout << "\t";
		for(u_int32_t nodeName : nodePath_existing){
			cout << nodeName << " ";
		}
		cout << endl;
		*/
		/*
		bool hasFoundAnchor = false;
		while(true){

			cout << "----" << endl;
			size_t j=0;
			bool isUnsupported = false;
			nodePath_supported.clear();

			for(long i=0; i< ((long)nodePath_existing.size())-supportSize; i++){
				
				j = i;
				u_int32_t nodeName_source = nodePath_existing[i];
				u_int32_t nodeName_dest = nodePath_existing[i+supportSize];

				u_int64_t nbSupportingReads = Utils::computeSharedReads(_unitigDatas[nodeName_source], _unitigDatas[nodeName_dest]);
				cout << nodeName_source << " " << nodeName_dest << " " << nbSupportingReads << endl;
				
				if(nbSupportingReads < 3){ 
					isUnsupported = true;
					break;
				}

				hasFoundAnchor = true;

				if(nodePath_supported.size() == 0){
					for(size_t j=i; j<i+supportSize; j++){
						nodePath_supported.push_back(nodePath_existing[j]);
					}
				}
				
				nodePath_supported.push_back(nodeName_dest);
				//cout << "\tSupporting reads: " << nodeName_source << " " << nodeName_dest << endl;
				//cout << "\t" << Utils::computeSharedReads(_unitigDatas[nodeName_source], _unitigDatas[nodeName_dest]) << endl;
			}

			if(isUnsupported){
				if(hasFoundAnchor){
					cout << "Removed: " << nodePath_existing[j+supportSize] << endl;
					nodePath_existing.erase(nodePath_existing.begin() + j + supportSize);
				}
				else{
					cout << "Removed: " << nodePath_existing[j] << endl;
					nodePath_existing.erase(nodePath_existing.begin() + j);
				}
			}
			else{
				break;
			}
		}
		*ยง
		/*
		for(long i=0; i< ((long)nodePath_existing.size())-supportSize; i++){
			
			u_int32_t nodeName_source = nodePath_existing[i];
			u_int32_t nodeName_dest = nodePath_existing[i+supportSize];

			u_int64_t nbSupportingReads = Utils::computeSharedReads(_unitigDatas[nodeName_source], _unitigDatas[nodeName_dest]);
			if(nbSupportingReads < 3) continue;

			if(nodePath_supported.size() == 0){
				for(size_t j=i; j<i+supportSize; j++){
					nodePath_supported.push_back(nodePath_existing[j]);
				}
			}
			
			nodePath_supported.push_back(nodeName_dest);
			//cout << "\tSupporting reads: " << nodeName_source << " " << nodeName_dest << endl;
			//cout << "\t" << Utils::computeSharedReads(_unitigDatas[nodeName_source], _unitigDatas[nodeName_dest]) << endl;
		}
		*/

		/*
		cout << "\tRead supported:" << endl;
		cout << "\t";
		for(u_int32_t nodeName : nodePath_supported){
			cout << nodeName << " ";
		}
		cout << endl;




		//cout << "Computing components" << endl;
		u_int32_t componentIndex = 0;
		//u_int32_t currentComponentIndex = 0;
		unordered_map<u_int32_t, u_int32_t> nodeName_to_component;
		//unordered_set<u_int32_t> isConnected;
		//vector<vector<u_int32_t>> components;
		
		for(size_t i=0; i<nodePath_supported.size(); i++){

			u_int32_t nodeName_source = nodePath_supported[i];

			if(nodeName_to_component.find(nodeName_source) == nodeName_to_component.end()){
				nodeName_to_component[nodeName_source] = componentIndex;
				componentIndex += 1;
			}

			u_int32_t currentComponentIndex = nodeName_to_component[nodeName_source];
			//currentComponentIndex = componentIndex;

			//if(isConnected.find(nodeName_source) != isConnected.end()) continue;

			//vector<u_int32_t> component;
			//component.push_back(nodeName_source);
			//isConnected.insert(nodeName_source);

			for(size_t j=i+1; j<nodePath_supported.size(); j++){
			
				u_int32_t nodeName_dest = nodePath_supported[j];

				//if(nodeName_to_component.find(nodeName_dest) != nodeName_to_component.end()){
				//	if(nodeName_to_component[nodeName_dest] == componentIndex) continue;
				//}

				//if(isConnected.find(nodeName_dest) != isConnected.end()) continue;

				//cout << "\tSearching path: " << nodeName_source << " " << nodeName_dest << endl;
				vector<u_int32_t> path;
				_graph->shortestPath_nodeName(nodeName_source, nodeName_dest, path, true, true, 20);
				//cout << "done" << endl;

				if(path.size() == 0) continue;
				
				nodeName_to_component[nodeName_dest] = currentComponentIndex;

				//component.push_back(nodeName_dest);
				//isConnected.insert(nodeName_dest);
				
			}

			//components.push_back(component);
		}

		unordered_map<u_int32_t, vector<u_int32_t>> components;
		for(auto& it : nodeName_to_component){
			components[it.second].push_back(it.first);
		}

		vector<u_int32_t> maxComponent;
		u_int32_t maxComponentSize = 0;
		if(components.size() != 1){
			cout << "\tComponents: " << components.size() << endl;
			for(auto& it : components){
				const vector<u_int32_t>& c = it.second;
				cout << "\t\t";
				for(u_int32_t nodeName : c) cout << nodeName << " ";
				cout << endl;
			}
			//getchar();
		} 
		
		for(auto& it : components){
			//cout << "\t\t" << c.size() << endl;
			const vector<u_int32_t>& c = it.second;

			if(c.size() > maxComponentSize){
				maxComponentSize = c.size();
				maxComponent = c;
			}
		}

		unordered_set<u_int32_t> componentIndexed;
		for(u_int32_t nodeName : maxComponent) componentIndexed.insert(nodeName);
		
		vector<u_int32_t> nodePath_connected;
		for(u_int32_t nodeName : nodePath_supported){
			if(componentIndexed.find(nodeName) == componentIndexed.end()) continue;
			nodePath_connected.push_back(nodeName);
		}
		*/



		vector<u_int32_t> nodePath_connected = nodePath_existing;
		u_int32_t prevNodename = -1;
		u_int32_t nodeIndex_source = -1;
		//u_int32_t nodeIndex_dest = -1;

		for(long i=0; i<((long)nodePath_connected.size())-1; i++){
			
			u_int32_t nodeName_source = nodePath_connected[i];
			u_int32_t nodeName_dest = nodePath_connected[i+1];

			unordered_set<u_int32_t> unallowedNodeNames;
			for(long j=0; j<nodePath_connected.size(); j++){
				if(nodePath_connected[j] == nodeName_source || nodePath_connected[j] == nodeName_dest) continue;
				unallowedNodeNames.insert(nodePath_connected[j]);
			}

			//cout << "\tSearching path: " << nodeName_source << " " << nodeName_dest << endl;
			//cout << Utils::computeSharedReads(_unitigDatas[nodeName_source], _unitigDatas[nodeName_dest]) << endl;

			vector<u_int32_t> path;
			_graph->shortestPath_nodeName(nodeName_source, nodeName_dest, path, true, true, maxDepth, _unitigDatas, unallowedNodeNames, nodeIndex_source, nodePath_anchor);


			//cout << "done" << endl;

			std::reverse(path.begin(), path.end());

			//cout << "\t";
			if(readpath.size() == 0){
				for(u_int32_t nodeIndex : path){
					readpath.push_back(nodeIndex);
				}
			}
			else{ //Discard source
				for(size_t i=1; i<path.size(); i++){ 
					//cout << BiGraph::nodeIndex_to_nodeName(nodeIndex) << " ";
					readpath.push_back(path[i]);
				}
			}
			prevNodename = nodeName_source;
			
			if(readpath.size() > 0){
				nodeIndex_source = readpath[readpath.size()-1];
			}
			//cout << endl;
		}
		//cout << endl;
		
		/*
		cout << nodePath_connected.size() << " " << nodePath_connected.size()-6 << endl;
		for(long i=0; i< ((long)nodePath_connected.size())-6; i++){
			
			u_int32_t nodeName_source = nodePath_connected[i];
			u_int32_t nodeName_dest = nodePath_connected[i+6];
			cout << "\tSupporting reads: " << nodeName_source << " " << nodeName_dest << endl;
			cout << "\t" << Utils::computeSharedReads(_unitigDatas[nodeName_source], _unitigDatas[nodeName_dest]) << endl;
		}
		*/

	}
